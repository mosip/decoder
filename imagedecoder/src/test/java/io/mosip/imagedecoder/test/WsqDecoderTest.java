package io.mosip.imagedecoder.test;

import static io.mosip.imagedecoder.constant.DecoderConstant.LOGGER_EMPTY;
import static io.mosip.imagedecoder.constant.DecoderConstant.LOGGER_IDTYPE;
import static io.mosip.imagedecoder.constant.DecoderConstant.LOGGER_SESSIONID;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.text.MessageFormat;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import io.mosip.imagedecoder.constant.DecoderErrorCodes;
import io.mosip.imagedecoder.logger.ImageDecoderLogger;
import io.mosip.imagedecoder.model.DecoderRequestInfo;
import io.mosip.imagedecoder.model.DecoderResponseInfo;
import io.mosip.imagedecoder.model.Response;
import io.mosip.imagedecoder.util.Base64UrlUtil;
import io.mosip.imagedecoder.wsq.WsqDecoder;
import io.mosip.kernel.core.logger.spi.Logger;

class WsqDecoderTest {

	private static Logger logger = ImageDecoderLogger.getLogger(WsqDecoderTest.class);

	private WsqDecoder wsqDecoder;

	@BeforeEach
	void setUp() {
		wsqDecoder = new WsqDecoder();
	}

	@Test
	void testDecodeSuccess() {
		// Arrange
		DecoderRequestInfo requestInfo = new DecoderRequestInfo();
		requestInfo.setImageData(Base64UrlUtil.getInstance().decodeURLSafeBase64(
				""));
		requestInfo.setBufferedImage(true);

		// Act
		Response<DecoderResponseInfo> info = wsqDecoder.decode(requestInfo);
		logger.info(LOGGER_SESSIONID, LOGGER_IDTYPE, LOGGER_EMPTY,
				MessageFormat.format("INFO :: WIDTH \t= {0}", info.getResponse().getImageWidth()));
		logger.info(LOGGER_SESSIONID, LOGGER_IDTYPE, LOGGER_EMPTY,
				MessageFormat.format("INFO :: HEIGHT \t= {0}", info.getResponse().getImageHeight()));
		logger.info(LOGGER_SESSIONID, LOGGER_IDTYPE, LOGGER_EMPTY,
				MessageFormat.format("INFO :: DEPTH \t= {0}", info.getResponse().getImageDepth()));
		logger.info(LOGGER_SESSIONID, LOGGER_IDTYPE, LOGGER_EMPTY,
				MessageFormat.format("INFO :: LOSSLESS \t= {0}", info.getResponse().getImageLossless()));
		logger.info(LOGGER_SESSIONID, LOGGER_IDTYPE, LOGGER_EMPTY,
				MessageFormat.format("INFO :: DPI_HORIZONTAL \t= {0}", info.getResponse().getImageDpiHorizontal()));
		logger.info(LOGGER_SESSIONID, LOGGER_IDTYPE, LOGGER_EMPTY,
				MessageFormat.format("INFO :: DPI_VERTICAL \t= {0}", info.getResponse().getImageDpiVertical()));
		logger.info(LOGGER_SESSIONID, LOGGER_IDTYPE, LOGGER_EMPTY,
				MessageFormat.format("INFO :: TYPE \t= {0}", info.getResponse().getImageType()));
		logger.info(LOGGER_SESSIONID, LOGGER_IDTYPE, LOGGER_EMPTY,
				MessageFormat.format("INFO :: SIZE \t= {0}", info.getResponse().getImageSize()));
		logger.info(LOGGER_SESSIONID, LOGGER_IDTYPE, LOGGER_EMPTY,
				MessageFormat.format("INFO :: COLORSPACE \t= {0}", info.getResponse().getImageColorSpace()));
		logger.info(LOGGER_SESSIONID, LOGGER_IDTYPE, LOGGER_EMPTY,
				MessageFormat.format("INFO :: ASPECT_RATIO \t= {0}", info.getResponse().getImageAspectRatio()));
		logger.info(LOGGER_SESSIONID, LOGGER_IDTYPE, LOGGER_EMPTY, MessageFormat
				.format("INFO :: COMPRESSION_RATIO \t= {0}", info.getResponse().getImageCompressionRatio()));

		// Assert
		assertEquals(0, info.getStatusCode());
		assertEquals(DecoderErrorCodes.SUCCESS.getErrorMessage(), info.getStatusMessage());
		// Add more assertions as needed
	}

	// Additional test cases to cover all paths
}